{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unidad 3 - Pr\u00e1ctica 1. Instalaci\u00f3n de Tomcat y Mava para despliegue de aplicaci\u00f3n Java Para la realizaci\u00f3n de esta pr\u00e1ctica es necesario como prerequisito la instalaci\u00f3n de una m\u00e1quina virtual con Debian 11 \"Bullseye\". Tambi\u00e9n es apropiado descargar, instalar y configurar herramientas \u00fatiles como ufw y openssh-server , que adem\u00e1s de ser \u00fatiles en el trabajo con m\u00e1quinas que act\u00faan como servidores, ser\u00e1n necesarias para conectar mediante SSH a nuestra m\u00e1quina anfitriona con la m\u00e1quina virtual. Instalaci\u00f3n y configuraci\u00f3n de Tomcat Permitimos la escucha a trav\u00e9s del puerto 8080 (es el puerto que Tomcat usa por defecto): sudo ufw allow 8080 Instalamos Java y Tomcat: sudo apt install openjdk-11-jdk sudo apt install tomcat9 Creamos un grupo y usuario espec\u00edficos para Tomcat en nuestra m\u00e1quina e iniciamos el servicio: sudo groupadd tomcat9; sudo useradd -s /bin/false -g tomcat9 -d /etc/tomcat9 tomcat9; sudo systemctl start tomcat9; A continuaci\u00f3n ser\u00e1 preciso modificar el archivo /etc/tomcat9/tomcat-users.xml, agregando las siguientes l\u00edneas para a\u00f1adir a un usuario administrador a Tomcat: A continuaci\u00f3n podemos acceder a Tomcat desde el puerto 8080 de la IP de la MV (en mi caso, 192.168.0.25:8080): Ahora debemos instalar el paquete 'tomcat9-admin', que se encarga de administrar las aplicaciones web de Tomcat: sudo apt install tomcat9-admin Y podremos acceder al gestor de aplicaciones web indicando el nombre y clave de usuarios que anteriormente a\u00f1adimos a la configuraci\u00f3n de Tomcat en la MV. Esta vez, es necesario indicar que accedemos al recurso alojado en /manager/html ( es decir, 192.168.0.25:8080/manager/html, en mi caso particular): Tambi\u00e9n podemos acceder al gestor de MV de Tomcat indicando igualmente usuario y clave (esta vez desde 192.168.0.25:8080/host-manager/html): Despliegue con Tomcat Una vez configurado Tomcat, podemos desplegar una aplicaci\u00f3n indicando un archivo con extensi\u00f3n '.war': Ahora, en el apartado \"Aplicaciones\", podremos encontrar la aplicaci\u00f3n que hemos desplegado y acceder a ella desde la ruta que viene indicada. En mi caso, la aplicaci\u00f3n se encuentra en '/sample'. Accediendo a ella: Instalaci\u00f3n y configuraci\u00f3n de Maven Para instalar Maven s\u00f3lo hace falta ejecutar: sudo apt install maven Ahora tendremos que volver a modificar el archivo de configuraci\u00f3n '/etc/tomcat9/tomcat-users.xml' para a\u00f1adir el rol de 'manager-script' y un nuevo usuario con tal rol, que debe ser diferente al usuario que ya hab\u00edamos creado en la instalaci\u00f3n y configuraci\u00f3n de Tomcat. En mi caso, el archivo ha quedado tal que: Adem\u00e1s, tambi\u00e9n tendremos que especificar esta informaci\u00f3n en el archivo de configuraci\u00f3n /etc/maven/settings.xml, dentro del bloque 'servers': Despliegue con Maven Aplicaci\u00f3n de prueba Para realizar el despliegue, utilizar\u00e9 una aplicaci\u00f3n de prueba en primer lugar. Primero, ejecuto: mvn archetype:generate -DgroupId=alberto -DartifactId=aplicacion-prueba -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false Ahora, en el proyecto del directorio 'aplicacion-prueba/' que hemos generado, modificamos el archivo 'pom.xml'. En el bloque 'build' se a\u00f1aden las siguientes l\u00edneas: <build> <finalName>aplicacion-prueba</finalName> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <url>http://localhost:8080/manager/text</url> <server>Tomcat.P.3.1</server> <path>/myapp</path> </configuration> </plugin> </plugins> </build> Tras lo cual ejecutamos: mvn tomcat7:deploy Y si todo est\u00e1 correcto, Maven debe arrojar un mensaje \"BUILD SUCCESS\". Al volver a Tomcat (\"ip_servidor:8080/manager\" si accedemos desde la m\u00e1quina anfitriona o \"localhost:8080/manager\" si accedemos desde la MV del servidor), encontraremos nuestra aplicaci\u00f3n desplegada: Despliegue de aplicaci\u00f3n Java Ahora que hemos comprobado que el despliegue puede realizarse correctamente sin errores, podemos realizar el despliegue de una aplicaci\u00f3n real de Java. Para ello, podemos clonar una aplicaci\u00f3n desde GitHub con: git clone https://github.com/cameronmcnz/rock-paper-scissors.git git checkout patch-1 # En el caso de este proyecto, debemos posicionarnos en la rama 'patch-1' De nuevo, modificamos el archivo 'pom.xml' y le agregamos el mismo bloque 'plugin' del caso anterior. Volvemos a ejecutar el despliegue y si entramos a Tomcat podremos encontrar la aplicaci\u00f3n lista: Y podremos acceder desde la ruta a la aplicaci\u00f3n: Cuestiones finales Las contrase\u00f1as que maneja Tomcat se almacenan como texto plano ya que para el acceso a bases de datos, Tomcat necesita las contrase\u00f1as originales. Incluso si la contrase\u00f1a fuese encriptada, como Tomcat es de c\u00f3digo abierto, un posible atacante conocer\u00e1 los m\u00e9todos de encriptaci\u00f3n y desencriptaci\u00f3n de Tomcat, por lo que no existir\u00eda una seguridad efectiva en este sentido.","title":"Unidad 3 - Pr\u00e1ctica 1. Instalaci\u00f3n de Tomcat y Mava para despliegue de aplicaci\u00f3n Java"},{"location":"#unidad-3-practica-1-instalacion-de-tomcat-y-mava-para-despliegue-de-aplicacion-java","text":"Para la realizaci\u00f3n de esta pr\u00e1ctica es necesario como prerequisito la instalaci\u00f3n de una m\u00e1quina virtual con Debian 11 \"Bullseye\". Tambi\u00e9n es apropiado descargar, instalar y configurar herramientas \u00fatiles como ufw y openssh-server , que adem\u00e1s de ser \u00fatiles en el trabajo con m\u00e1quinas que act\u00faan como servidores, ser\u00e1n necesarias para conectar mediante SSH a nuestra m\u00e1quina anfitriona con la m\u00e1quina virtual.","title":"Unidad 3 - Pr\u00e1ctica 1. Instalaci\u00f3n de Tomcat y Mava para despliegue de aplicaci\u00f3n Java"},{"location":"#instalacion-y-configuracion-de-tomcat","text":"Permitimos la escucha a trav\u00e9s del puerto 8080 (es el puerto que Tomcat usa por defecto): sudo ufw allow 8080 Instalamos Java y Tomcat: sudo apt install openjdk-11-jdk sudo apt install tomcat9 Creamos un grupo y usuario espec\u00edficos para Tomcat en nuestra m\u00e1quina e iniciamos el servicio: sudo groupadd tomcat9; sudo useradd -s /bin/false -g tomcat9 -d /etc/tomcat9 tomcat9; sudo systemctl start tomcat9; A continuaci\u00f3n ser\u00e1 preciso modificar el archivo /etc/tomcat9/tomcat-users.xml, agregando las siguientes l\u00edneas para a\u00f1adir a un usuario administrador a Tomcat: A continuaci\u00f3n podemos acceder a Tomcat desde el puerto 8080 de la IP de la MV (en mi caso, 192.168.0.25:8080): Ahora debemos instalar el paquete 'tomcat9-admin', que se encarga de administrar las aplicaciones web de Tomcat: sudo apt install tomcat9-admin Y podremos acceder al gestor de aplicaciones web indicando el nombre y clave de usuarios que anteriormente a\u00f1adimos a la configuraci\u00f3n de Tomcat en la MV. Esta vez, es necesario indicar que accedemos al recurso alojado en /manager/html ( es decir, 192.168.0.25:8080/manager/html, en mi caso particular): Tambi\u00e9n podemos acceder al gestor de MV de Tomcat indicando igualmente usuario y clave (esta vez desde 192.168.0.25:8080/host-manager/html):","title":"Instalaci\u00f3n y configuraci\u00f3n de Tomcat"},{"location":"#despliegue-con-tomcat","text":"Una vez configurado Tomcat, podemos desplegar una aplicaci\u00f3n indicando un archivo con extensi\u00f3n '.war': Ahora, en el apartado \"Aplicaciones\", podremos encontrar la aplicaci\u00f3n que hemos desplegado y acceder a ella desde la ruta que viene indicada. En mi caso, la aplicaci\u00f3n se encuentra en '/sample'. Accediendo a ella:","title":"Despliegue con Tomcat"},{"location":"#instalacion-y-configuracion-de-maven","text":"Para instalar Maven s\u00f3lo hace falta ejecutar: sudo apt install maven Ahora tendremos que volver a modificar el archivo de configuraci\u00f3n '/etc/tomcat9/tomcat-users.xml' para a\u00f1adir el rol de 'manager-script' y un nuevo usuario con tal rol, que debe ser diferente al usuario que ya hab\u00edamos creado en la instalaci\u00f3n y configuraci\u00f3n de Tomcat. En mi caso, el archivo ha quedado tal que: Adem\u00e1s, tambi\u00e9n tendremos que especificar esta informaci\u00f3n en el archivo de configuraci\u00f3n /etc/maven/settings.xml, dentro del bloque 'servers':","title":"Instalaci\u00f3n y configuraci\u00f3n de Maven"},{"location":"#despliegue-con-maven","text":"","title":"Despliegue con Maven"},{"location":"#aplicacion-de-prueba","text":"Para realizar el despliegue, utilizar\u00e9 una aplicaci\u00f3n de prueba en primer lugar. Primero, ejecuto: mvn archetype:generate -DgroupId=alberto -DartifactId=aplicacion-prueba -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false Ahora, en el proyecto del directorio 'aplicacion-prueba/' que hemos generado, modificamos el archivo 'pom.xml'. En el bloque 'build' se a\u00f1aden las siguientes l\u00edneas: <build> <finalName>aplicacion-prueba</finalName> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <url>http://localhost:8080/manager/text</url> <server>Tomcat.P.3.1</server> <path>/myapp</path> </configuration> </plugin> </plugins> </build> Tras lo cual ejecutamos: mvn tomcat7:deploy Y si todo est\u00e1 correcto, Maven debe arrojar un mensaje \"BUILD SUCCESS\". Al volver a Tomcat (\"ip_servidor:8080/manager\" si accedemos desde la m\u00e1quina anfitriona o \"localhost:8080/manager\" si accedemos desde la MV del servidor), encontraremos nuestra aplicaci\u00f3n desplegada:","title":"Aplicaci\u00f3n de prueba"},{"location":"#despliegue-de-aplicacion-java","text":"Ahora que hemos comprobado que el despliegue puede realizarse correctamente sin errores, podemos realizar el despliegue de una aplicaci\u00f3n real de Java. Para ello, podemos clonar una aplicaci\u00f3n desde GitHub con: git clone https://github.com/cameronmcnz/rock-paper-scissors.git git checkout patch-1 # En el caso de este proyecto, debemos posicionarnos en la rama 'patch-1' De nuevo, modificamos el archivo 'pom.xml' y le agregamos el mismo bloque 'plugin' del caso anterior. Volvemos a ejecutar el despliegue y si entramos a Tomcat podremos encontrar la aplicaci\u00f3n lista: Y podremos acceder desde la ruta a la aplicaci\u00f3n:","title":"Despliegue de aplicaci\u00f3n Java"},{"location":"#cuestiones-finales","text":"Las contrase\u00f1as que maneja Tomcat se almacenan como texto plano ya que para el acceso a bases de datos, Tomcat necesita las contrase\u00f1as originales. Incluso si la contrase\u00f1a fuese encriptada, como Tomcat es de c\u00f3digo abierto, un posible atacante conocer\u00e1 los m\u00e9todos de encriptaci\u00f3n y desencriptaci\u00f3n de Tomcat, por lo que no existir\u00eda una seguridad efectiva en este sentido.","title":"Cuestiones finales"}]}